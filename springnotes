spring is a framework used for enterprise application,Spring framework makes the easy development of JavaEE application.
Spring Framework Fundamentals:
Spring is a lightweight framework. It can be thought of as a framework of frameworks because it provides support to various
frameworks such as Struts, Hibernate, Tapestry, EJB, JSF etc.The framework, in broader sense, can be defined as a structure
where we find solution of the various technical problems.

The Spring framework comprises several modules such as IOC, AOP, DAO, Context, ORM, WEB MVC etc. We will learn these modules 
in next page. Let's understand the IOC and Dependency Injection first.
Inversion Of Control (IOC) and Dependency Injection
These are the design patterns that are used to remove dependency from the programming code. They make the code easier to test
and maintain. Let's understand this with the following code:

class Employee{  
Address address;  
Employee(){  
address=new Address();  
}  
}  
In such case, there is dependency between the Employee and Address (tight coupling). In the Inversion of Control scenario,
we do this something like this:

class Employee{  
Address address;  
Employee(Address address){  
this.address=address;  
}  
}  
Thus, IOC makes the code loosely coupled. In such case, there is no need to modify the code if our logic is moved to new 
environment.

In Spring framework, IOC container is responsible to inject the dependency. We provide metadata to the IOC container either 
by XML file or annotation.

Advantage of Dependency Injection
makes the code loosely coupled so easy to maintain
makes the code easy to test
Advantages of Spring Framework
There are many advantages of Spring Framework. They are as follows:

1) Predefined Templates
Spring framework provides templates for JDBC, Hibernate, JPA etc. technologies. So there is no need to write too much code. It hides the basic steps of these technologies.

Let's take the example of JdbcTemplate, you don't need to write the code for exception handling, creating connection, creating statement, committing transaction, closing connection etc. You need to write the code of executing query only. Thus, it save a lot of JDBC code.

2) Loose Coupling
The Spring applications are loosely coupled because of dependency injection.

3) Easy to test
The Dependency Injection makes easier to test the application. The EJB or Struts application require server to run the application but Spring framework doesn't require server.

4) Lightweight
Spring framework is lightweight because of its POJO implementation. The Spring Framework doesn't force the programmer to inherit any class or implement any interface. That is why it is said non-invasive.

5) Fast Development
The Dependency Injection feature of Spring Framework and it support to various frameworks makes the easy development of JavaEE application.

6) Powerful abstraction
It provides powerful abstraction to JavaEE specifications such as JMS, JDBC, JPA and JTA.

7) Declarative support
It provides declarative support for caching, validation, transactions and formatting.

Java EE is actually a collection of technologies and APIs for the Java platform designed to support "Enterprise" Applications
which can generally be classed as large-scale, distributed, transactional and highly-available applications designed to 
support mission-critical business requirements.

SPRING MODULE:
The Spring framework comprises of many modules such as core, beans, context, expression language, AOP, Aspects, Instrumentation
, JDBC, ORM, OXM, JMS, Transaction, Web, Servlet, Struts etc. These modules are grouped into Test, Core Container, AOP, Aspects
, Instrumentation, Data Access / Integration, Web (MVC / Remoting) as displayed in the following diagram.

Test
This layer provides support of testing with JUnit and TestNG.

Spring Core Container
The Spring Core container contains core, beans, context and expression language (EL) modules.

Core and Beans
These modules provide IOC and Dependency Injection features.

Context
This module supports internationalization (I18N), EJB, JMS, Basic Remoting.

Expression Language
It is an extension to the EL defined in JSP. It provides support to setting and getting property values, method invocation, 
accessing collections and indexers, named variables, logical and arithmetic operators, retrieval of objects by name etc.

AOP, Aspects and Instrumentation
These modules support aspect oriented programming implementation where you can use Advices, Pointcuts etc. to decouple the 
code.

The aspects module provides support to integration with AspectJ.

The instrumentation module provides support to class instrumentation and classloader implementations.

Data Access / Integration
This group comprises of JDBC, ORM, OXM, JMS and Transaction modules. These modules basically provide support to interact with
the database.

Web
This group comprises of Web, Web-Servlet, Web-Struts and Web-Portlet. These modules provide support to create web application.

Spring Example::
Here, we are going to learn the simple steps to create the first spring application. To run this application, we are not using
any IDE. We are simply using the command prompt. Let's see the simple steps to create the spring application.

create the class
create the xml file to provide the values
create the test class
Load the spring jar files
Run the test class

Let's see the 5 steps to create the first spring application.

1) Create Java class
This is the simple java bean class containing the name property only.

package com.javatpoint;  
  
public class Student {  
private String name;  
  
public String getName() {  
    return name;  
}  
  
public void setName(String name) {  
    this.name = name;  
}  
  
public void displayInfo(){  
    System.out.println("Hello: "+name);  
}  
}  
This is simple bean class, containing only one property name with its getters and setters method. This class contains one extra
method named displayInfo() that prints the student name by the hello message.

2) Create the xml file
In case of myeclipse IDE, you don't need to create the xml file as myeclipse does this for yourselves. Open the applicationContext.xml file, and write the following code:

<?xml version="1.0" encoding="UTF-8"?>  
<beans  
    xmlns="http://www.springframework.org/schema/beans"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xmlns:p="http://www.springframework.org/schema/p"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans  
               http://www.springframework.org/schema/beans/spring-beans-3.0.xsd">  
  
<bean id="studentbean" class="com.javatpoint.Student">  
<property name="name" value="Vimal Jaiswal"></property>  
</bean>  
  
</beans>  
The bean element is used to define the bean for the given class. The property subelement of bean specifies the property of the
Student class named name. The value specified in the property element will be set in the Student class object by the IOC 
container.
3) Create the test class
Create the java class e.g. Test. Here we are getting the object of Student class from the IOC container using the getBean() 
method of BeanFactory. Let's see the code of test class.

package com.javatpoint;  
  
import org.springframework.beans.factory.BeanFactory;  
import org.springframework.beans.factory.xml.XmlBeanFactory;  
import org.springframework.core.io.ClassPathResource;  
import org.springframework.core.io.Resource;  
  
public class Test {  
public static void main(String[] args) {  
    Resource resource=new ClassPathResource("applicationContext.xml");  
    BeanFactory factory=new XmlBeanFactory(resource);  
      
    Student student=(Student)factory.getBean("studentbean");  
    student.displayInfo();  
}  
}  
The Resource object represents the information of applicationContext.xml file. The Resource is the interface and the 
ClassPathResource is the implementation class of the Reource interface. The BeanFactory is responsible to return the bean. 
The XmlBeanFactory is the implementation class of the BeanFactory. There are many methods in the BeanFactory interface. 
One method is getBean(), which returns the object of the associated class.




web appl:
1. Html,css,js,xml,etc  + servlet - create dynamic website(web app)
servlet :- 
1. java pgm
2. server side.
3. Api

enterprise appl:
load balance , security , transaction mgmt , distribution -(J2EE APPLICATION)
it become complex then EJB comes.

web server and application server 
web server : it contains servlet container (to run web application) 
it can run only web application.

application server :
it contains ws and like (ejb container ).

for spring application we need application server.


>>This spring tutorial provides in-depth concepts of Spring Framework with simplified examples. It was developed by Rod Johnson in 2003. Spring framework makes the easy development of JavaEE application.

>>The IoC container is responsible to instantiate, configure and assemble the objects. The IoC container gets informations from the XML file and works accordingly. The main tasks performed by IoC container are:
invert the flow of control.

1.to instantiate the application class
2.to configure the object
3.to assemble the dependencies between the objects
There are two types of IoC containers,They are:
-----------------------------------------------
BeanFactory
ApplicationContext

Difference between BeanFactory and the ApplicationContext:
----------------------------------------------------------
The org.springframework.beans.factory.BeanFactory and the org.springframework.context.ApplicationContext interfaces acts as the
IoC container. The ApplicationContext interface is built on top of the BeanFactory interface. It adds some extra functionality
than BeanFactory such as simple integration with Spring's AOP, message resource handling (for I18N), event propagation, 
application layer specific context (e.g. WebApplicationContext) for web application. So it is better to use ApplicationContext
than BeanFactory.

Using BeanFactory:
------------------
The XmlBeanFactory is the implementation class for the BeanFactory interface. To use the BeanFactory, we need to create the 
instance of XmlBeanFactory class as given below:

Resource resource=new ClassPathResource("applicationContext.xml");  
BeanFactory factory=new XmlBeanFactory(resource);  
The constructor of XmlBeanFactory class receives the Resource object so we need to pass the resource object to create the 
object of BeanFactory.

Using ApplicationContext:
-------------------------
The ClassPathXmlApplicationContext class is the implementation class of ApplicationContext interface. We need to instantiate
the ClassPathXmlApplicationContext class to use the ApplicationContext as given below:

ApplicationContext context =   
    new ClassPathXmlApplicationContext("applicationContext.xml");  
The constructor of ClassPathXmlApplicationContext class receives string, so we can pass the name of the xml file to create the
instance of ApplicationContext.

DI::
in case of setter injection ::>>
--------------------------------
for list:
---------
<bean id="q" class="com.practice.Question">  
<property name="id" value="1"></property>  
<property name="name" value="What is Java?"></property>  
<property name="answers">  
<list>  
<value>Java is a programming language</value>  
<value>Java is a platform</value>  
<value>Java is an Island</value>  
</list>  
</property>  
</bean> 

Our Example:
------------ 

in this class we are making a object of customerRepository = new customerRepositoryImpl();
* but instead of that we are using setter injection.
* so for that here we removed new and created constructor for the class in which we want to call method
* and in bean xml file pass object of that.

*<bean name="foo" class="com.pluralsight.repositoty.HibernateCustomerRepositoryImpl" />

    <bean name="customerService"
          class="com.pluralsight.service.CustomerServiceImpl">
        <property name="customerRepository" ref="foo"></property>
    </bean>

here we created bean of both class and pass the bean of class for which we created object .

Constructor injection is index based while setter injection is name based.


in case of Constructor injection ::>>
-------------------------------------
We can inject the dependency by constructor. The <constructor-arg> subelement of <bean> is used for constructor injection. Here we are going to inject

primitive and String-based values:
__________________________________

<bean id="e" class="com.practice.Employee">  
<constructor-arg value="10" type="int" ></constructor-arg>  
<constructor-arg value="Sonoo"></constructor-arg>  
</bean> 

Dependent object (contained object):
------------------------------------
<bean id="a1" class="com.practice.Address">  
<constructor-arg value="ghaziabad"></constructor-arg>  
<constructor-arg value="UP"></constructor-arg>  
<constructor-arg value="India"></constructor-arg>  
</bean>  
  
  
<bean id="e" class="com.practice.Employee">  
<constructor-arg value="12" type="int"></constructor-arg>  
<constructor-arg value="Sonoo"></constructor-arg>  
<constructor-arg>  
<ref bean="a1"/>  
</constructor-arg>  
</bean>  

Collection values etc:
----------------------
<bean id="q" class="com.practice.Question">  
<constructor-arg value="111"></constructor-arg>  
<constructor-arg value="What is java?"></constructor-arg>  
<constructor-arg>  
<list>  
<value>Java is a programming language</value>  
<value>Java is a Platform</value>  
<value>Java is an Island of Indonasia</value>  
</list>  
</constructor-arg>  
</bean>  


Our Example:
------------
<bean name="customerRepository" class="com.pluralsight.repositoty.HibernateCustomerRepositoryImpl" />

    <bean name="customerService"
          class="com.pluralsight.service.CustomerServiceImpl">
        <constructor-arg index="0" ref="customerRepository"/>
    </bean>

in case of Constructor Autowire ::>>
-------------------------------------
Spring automaticallys wires Beans
byTypes
byName
constructor
no

1) byName autowiring mode
In case of byName autowiring mode, bean id and reference name must be same.

It internally uses setter injection.

<bean id="b" class="org.sssit.B"></bean>  
<bean id="a" class="org.sssit.A" autowire="byName"></bean>  
But, if you change the name of bean, it will not inject the dependency.

Let's see the code where we are changing the name of the bean from b to b1.

<bean id="b1" class="org.sssit.B"></bean>  
<bean id="a" class="org.sssit.A" autowire="byName"></bean>

2) byType autowiring mode

In case of byType autowiring mode, bean id and reference name may be different. But there must be only one bean of a type.

It internally uses setter injection.

<bean id="b1" class="org.sssit.B"></bean>  
<bean id="a" class="org.sssit.A" autowire="byType"></bean>  
In this case, it works fine because you have created an instance of B type. It doesn't matter that you have different bean name than reference name.

But, if you have multiple bean of one type, it will not work and throw exception.

Let's see the code where are many bean of type B.

<bean id="b1" class="org.sssit.B"></bean>  
<bean id="b2" class="org.sssit.B"></bean>  
<bean id="a" class="org.sssit.A" autowire="byName"></bean>  
In such case, it will throw exception.

3) constructor autowiring mode

In case of constructor autowiring mode, spring container injects the dependency by highest parameterized constructor.

If you have 3 constructors in a class, zero-arg, one-arg and two-arg then injection will be performed by calling the two-arg constructor.

<bean id="b" class="org.sssit.B"></bean>  
<bean id="a" class="org.sssit.A" autowire="constructor"></bean>  

4) no autowiring mode

In case of no autowiring mode, spring container doesn't inject the dependency by autowiring.

<bean id="b" class="org.sssit.B"></bean>  
<bean id="a" class="org.sssit.A" autowire="no"></bean>  

constructor case:
-----------------
<bean name="customerRepository" class="com.pluralsight.repositoty.HibernateCustomerRepositoryImpl" />

    <bean name="customerService"
          class="com.pluralsight.service.CustomerServiceImpl" autowire="constructor">
        <!--<constructor-arg index="0" ref="customerRepository"/>-->
        <!--<property name="customerRepository" ref="foo"></property>-->
</bean>



byTypes:
----------

    <bean name="customerService"
          class="com.pluralsight.service.CustomerServiceImpl" autowire="byType">

it will lookup for argument at customerRepository setter injection method.

byType doesn't care about bean name and method naming convention but not same case with byName.


>>There are many key differences between constructor injection and setter injection.

Partial dependency: can be injected using setter injection but it is not possible by constructor. Suppose there are 3 properties in a class, having 3 arg constructor and setters methods. In such case, if you want to pass information for only one property, it is possible by setter method only.

Overriding: Setter injection overrides the constructor injection. If we use both constructor and setter injection, IOC container will use the setter injection.

Changes: We can easily change the value by setter injection. It doesn't create a new bean instance always like constructor. So setter injection is flexible than constructor injection.


-------------------------------------

 <context:annotation-config/>
    
    <context:component-scan base-package="com.pluralsight"/>



this tells that we are using annotation configuration and it starts scanning from base package specified.


@component - any thing inside our application we marked as beans(any pojo-plain old java object).
@service - business logic layer.
@Repository - data base layer what ever we choose like jpa,hibernate.

---------------
AUTOWIRE:
---------------
Better with annotation
Tied with location
we can autowire at 3 places :
-----------------------------
1.Member variable
2.constructor
3.setter

1.Member variable
------------------

@Service("customerService")
public class CustomerServiceImpl implements CustomerService {

    @Autowired
    private CustomerRepository customerRepository;

    @Override
    public List<Customer> findAll(){
        return customerRepository.findAll();
        }
2.setter:
---------------
  @Autowired
    public void setCustomerRepository(CustomerRepository customerRepository) {
        System.out.println("setter injection");
        this.customerRepository = customerRepository;
    }
3.constructor:
--------------
 @Autowired
    public CustomerServiceImpl(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }

Scope:
------
1.singelton - which is default.
restrict the instantiate of class to one object.single instance per spring container.
@scope("singelton") is used as annotation to add scope.

 CustomerService service=appContext.getBean("customerService",CustomerService.class);

 CustomerService service2=appContext.getBean("customerService",CustomerService.class);

 System.out.println(service);//print address
 System.out.println(service2);
 and we will get same object address each time.
 
 we can use configurationBeanFactory.SCOPE_SINGLETON inside scope.

2.prototype.
it gives unique identities with each request,we will get unique object address each time.
we can use configurationBeanFactory.SCOPE_PROTOTYPE inside scope.

>>valid only in web aware spring projects:
3.Request - returns a bean per http request which sounds a lot like prototype excepts it's for the life cycle of a request 
  which is fairly short but longer than a prototype where its one instance per every time i ask the container for a bean .
4. session - returns a single bean per http request and live long as user session is alive.a bean of session will live along 
   with user time alive on website.
5. global - returns a single bean per application and it will share across all user on application and it alive for duration
   of my application.
   
   
Properties file:
----------------
great way to abstract congiguration like id password url.

first create app.properties
put dbUsername=mysqlusername

<context:property-placeholder location="app.properties"/>
<bean name="customerRepository" 
      class="com.pluralsight..repository.HibernatecustomerRepositoryImpl">
    <property name="dbUsername" value="${dbUsername}" />
</bean>
and in HibernatecustomerRepositoryImpl.java 
and create private string dbUsername;
and create setter for that.
and print dbUsername inside method.

for annotation we need to chance annotation config in applicationcontext.xml
@value("${dbUsername}")
-------------------------------
java configuration:
@propertySource("app.properties")

and in Appconfig.java
public PropertySourcesPlaceholderConfigurer propertySourcesPlaceholderConfigurer() {
        return propertySourcesPlaceholderConfigurer();
    }




